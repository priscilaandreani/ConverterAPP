{"version":3,"sources":["components/Conversor.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Conversor","props","state","moedaA_valor","moedaB_valor","converter","bind","de_para","this","moedaA","moedaB","url","fetch","then","res","json","cotacao","parseFloat","toFixed","setState","console","log","className","type","onChange","event","target","value","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"wPAIqBA,G,yBAEjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAEDC,MAAQ,CACTC,aAAc,GACdC,aAAc,GAGlB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBARH,E,yEAWN,IAAD,OAEHC,EAAO,UAAMC,KAAKP,MAAMQ,OAAjB,YAA2BD,KAAKP,MAAMS,QAC7CC,EAAI,8CAAD,OAAgDJ,EAAhD,8CAEPK,MAAMD,GACLE,MAAK,SAAAC,GACF,OAAOA,EAAIC,UAEdF,MAAK,SAAAE,GACF,IAAIC,EAAUD,EAAKR,GACfH,EAAea,WAAY,EAAKf,MAAMC,aAAca,GAASE,QAAQ,GACzE,EAAKC,SAAS,CAACf,iBACfgB,QAAQC,IAAI,EAAKnB,MAAME,cACvBgB,QAAQC,IAAIL,GACZI,QAAQC,IAAI,EAAKnB,Y,+BAKf,IAAD,OACL,OACI,yBAAKoB,UAAU,YACX,yBAAKA,UAAU,aACX,4BAAKd,KAAKP,MAAMQ,OAAhB,OAA4BD,KAAKP,MAAMS,QACvC,2BAAOY,UAAU,OAAOC,KAAK,OAAOC,SAAW,SAACC,GAAS,EAAKN,SAAS,CAAChB,aAAasB,EAAMC,OAAOC,WAClG,2BAAOL,UAAU,MAAMC,KAAK,SAASI,MAAM,SAAIC,QAAUpB,KAAKH,YAC9D,wBAAIiB,UAAU,aAAd,KAA6Bd,KAAKN,MAAME,oB,GAxCrByB,cC0BxBC,MAxBf,WACE,OACE,yBAAKR,UAAU,OACb,uDAA4B,2CAC5B,yBAAKA,UAAU,SACf,kBAAC,EAAD,CAAWb,OAAO,MAAMC,OAAO,QAC/B,kBAAC,EAAD,CAAWD,OAAO,MAAMC,OAAO,SAE/B,yBAAKY,UAAU,SACf,kBAAC,EAAD,CAAWb,OAAO,MAAKC,OAAO,QAC9B,kBAAC,EAAD,CAAWD,OAAO,MAAKC,OAAO,SAG9B,yBAAKY,UAAU,SACf,kBAAC,EAAD,CAAWb,OAAO,MAAKC,OAAO,QAC9B,kBAAC,EAAD,CAAWD,OAAO,MAAKC,OAAO,SAE9B,yBAAKY,UAAU,aACb,iFCZYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.7593a087.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { render } from \"@testing-library/react\";\nimport './Conversor.css'\n\nexport default class Conversor extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            moedaA_valor: \"\",\n            moedaB_valor: 0,\n        }\n    \n        this.converter = this.converter.bind(this);\n    }\n\n    converter(){\n\n        let de_para = `${this.props.moedaA}_${this.props.moedaB}`;\n        let url= `https://free.currconv.com/api/v7/convert?q=${de_para}&compact=ultra&apiKey=2e5b02f6ac583e948ed4`\n\n        fetch(url)\n        .then(res =>{\n            return res.json()\n        })\n        .then(json =>{\n            let cotacao = json[de_para];\n            let moedaB_valor = parseFloat((this.state.moedaA_valor)*cotacao).toFixed(3);\n            this.setState({moedaB_valor});\n            console.log(this.state.moedaB_valor);\n            console.log(cotacao);\n            console.log(this.state)\n        })\n            \n    }\n\n    render() {\n        return(\n            <div className=\"programa\">\n                <div className=\"conversor\">\n                    <h2>{this.props.moedaA} to {this.props.moedaB}</h2>\n                    <input className=\"text\" type=\"text\" onChange= {(event)=>{this.setState({moedaA_valor:event.target.value})}}></input>\n                    <input className=\"btn\" type=\"button\" value=\"â‡†\" onClick= {this.converter}></input>\n                    <h3 className=\"resultado\">$ {this.state.moedaB_valor}</h3>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Conversor from \"./components/Conversor\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Currency Converter with <span>React.js</span></h2>\n      <div className=\"linha\">\n      <Conversor moedaA=\"USD\" moedaB=\"BRL\"></Conversor>\n      <Conversor moedaA=\"BRL\" moedaB=\"USD\"></Conversor>\n      </div>\n      <div className=\"linha\">\n      <Conversor moedaA=\"EUR\"moedaB=\"BRL\"></Conversor>\n      <Conversor moedaA=\"EUR\"moedaB=\"BRL\"></Conversor>\n      </div>\n\n      <div className=\"linha\">\n      <Conversor moedaA=\"GBP\"moedaB=\"BRL\"></Conversor>\n      <Conversor moedaA=\"BRL\"moedaB=\"GBP\"></Conversor>\n      </div>\n      <div className=\"attention\">\n        <p>Please, to use this conversor use dot notation.</p> \n      </div> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}